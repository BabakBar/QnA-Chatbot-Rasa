It's good to understand what some of these files are for. So as a quick overview:

The domain.yml file is the file where everything comes together.
The config.yml file contains the configuration for your machine learning models.
The data folder contains data that your assistant will learn from.
The nlu.yml file contains examples for your intents and entities.
The stories.yml file contains examples of conversations turns.
The rules.yml file contains predefined rules for the dialogue policies.

rasa init allows you to start a new Rasa project.
rasa train allows you to train a new assistant based on your current training data.
rasa shell allows you to chat with a trained assistant.
rasa -h allows you get receive relevant help text for a command.
rasa --debug gives you extra log output when running commands

The Domain File: directory of all tbe bot knows

Responses: These are the things the assistant can say to users.
Intents: These are categories of things users say.
Slots: These are variables remembered over the course of a conversation.
Entities: These are pieces of information extracted from incoming text.
Forms and actions: These add application logic & extend what your assistant can do.


so these are what your responses will
look like in your domain.emo file
you'll have responses in a colon and
then indented utter underscore greet
utter here does need to be exactly the
word utter but greet can be whatever it
is that you are describing your
assistant doing and then the specific
text of the response so this assistant
has five responses and these five things
are the only things your assistant will
say to your users assuming that you're
not doing any custom nlg natural
language generation
and we always recommend that you include
a response like this or similar to this
that tells your users that they are
talking with a bot right they're talking
with a chat bot or a virtual system or
whatever your particular project is
you can also add a little bit more
variation so if you add multiple texts
for a specific utterance
one will be
randomly selected so if you saw our
april fool's project where the the bot
would respond with an animal call when
you sent it an animal call that was done
using this there was just a bunch of
responses and one was randomly selected
at each turn
and you can also use slots in your
response so remember slots are variables
that your assistant stores
and you can use the name of the slot in
curly brackets so these are similar to f
strings in python if you're familiar
with that you can also add some
additional functionality to your
responses make them a little bit fancier
so you can add buttons the specific way
that the buttons will render will be
channel dependent so you may have to do
some you know custom front end work to
make your buttons look just so depending
on your channel
and you can also uh add images and again
how these are rendered will be channel
dependent uh but raza will send you know
a json with these information in it
if you are running your raza assistant
across multiple
channels using multiple connectors you
can select your reply based on the
specific channel that someone has
interacted with your assistant on
so here we have
a specific channel slack and the text
that is responded there will be the text
above it which game would you like to
play on slack and any other channel will
get the second response
you can also provide more information
than just responses so i mentioned this
is sent as a json uh you can provide you
know different types of uh information
in that that hierarchical format and the
specific structure for the information
you know the specific fields you'll need
that will also be channeled to specific
so it'll depend on where your bot is
deployed responses are things your
assistant says to users
intents are things your users say to
your assistant so uh here we have a list
of intents
and in a separate place we will provide
training data for ways that users might
express that intent and the nlu will
take in that training data and map it to
one of these intents so these are
classes for multi-class
classification and my number one tip for
writing intents is start with the
absolute smallest number of intents you
can
you can change or add intense at any
time with your raza assistant
but starting with too many will create
just a huge headache and you don't
necessarily know what intents your users
are going to use the most until you get
it in front of test users so
that's uh what's in your domain file and
the way that you can define responses
that your assistant will send to users
and also intents the types of things
that users can say to your assistant